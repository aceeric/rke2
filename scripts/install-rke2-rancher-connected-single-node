#!/usr/bin/env bash
#
# Connected RKE2 / Rancher single-node install
#
# Installs RKE2/Rancher on a single VM. The result is a single-node
# RKE2 cluster with Rancher. The script expects the VM to have internet
# access to the RKE2/Rancher GitHub releases, as well as the Helm binary
# download, and Helm repos.
#
# Usage:
#
# 1) Provision a VM
# 2) Copy this script into the VM home directory
# 3) Run the script as root
# 4) Access the Rancher UI using the VM hostname. The
#    bootstrap administrator password is 'admin' which
#    you must change on initial login
#
# To un-install RKE2/Rancher from the VM use the Rancher-supplied
# script:
#
# sudo /usr/bin/rke2-uninstall.sh
#

set -e

function msg {
  echo "$(date '+%Y-%m-%d %H:%M:%S.%3N') -- $1" | tee -a ~/rke2-install.log
}

msg "start"

msg "confirm user is sudoer"

if [[ $(sudo -v &>/dev/null) -ne 0 ]]; then
  echo "you must be a sudoer"
  exit 1
fi

# per https://docs.rke2.io/known_issues/#networkmanager

if [[ ! -f /etc/NetworkManager/conf.d/rke2-canal.conf ]]; then
  msg "creating /etc/NetworkManager/conf.d/rke2-canal.conf"
  cat <<EOF > /etc/NetworkManager/conf.d/rke2-canal.conf
[keyfile]
unmanaged-devices=interface-name:cali*;interface-name:flannel*
EOF
fi

msg "restart NetworkManager"

systemctl reload NetworkManager 

msg "disable firewalld"

systemctl stop firewalld && systemctl disable firewalld

msg "configure socat"

yum -y install socat conntrack ipset

msg "disable swap"

[[ -z "$(swapon --show)" ]] || { swapoff -a; sed -i '/ swap /d' /etc/fstab; }

msg "download the RKE2 installer"

mkdir -p ~/rke2 &&\
 cd ~/rke2 &&\
 curl -sfL https://get.rke2.io -o install.sh &&\
 chmod +x ./install.sh

msg "run the RKE2 installer"

./install.sh

msg "enable and run RKE2 server service"

systemctl enable --now rke2-server.service

msg "configure binaries for cluster access in the VM"

mkdir -p /root/.kube
cp /var/lib/rancher/rke2/bin/kubectl /usr/local/bin
cp /var/lib/rancher/rke2/bin/crictl /usr/local/bin
cp /var/lib/rancher/rke2/bin/ctr /usr/local/bin
cp /etc/rancher/rke2/rke2.yaml /root/.kube/config

msg "wait for RKE2 jobs"

while true; do
  if ! kubectl -n kube-system wait job --all --for=condition=Complete --timeout=60s; then
    msg "sleeping 10 seconds"
    sleep 10s
  else
    break
  fi
done

msg "wait for RKE2 deployments"

kubectl -n kube-system wait deploy --all --for condition=available --timeout=180s

msg "wait for RKE2 daemonsets"

kubectl -n kube-system get ds -oname | xargs -I% kubectl -n kube-system rollout status % --timeout 180s

msg "patch kube-controller-manager for rancher compatibility with k8s 1.24.6"

sed -i -e s/--feature-gates=JobTrackingWithFinalizers=true/--feature-gates=JobTrackingWithFinalizers=true,LegacyServiceAccountTokenNoAutoGeneration=false/\
 /var/lib/rancher/rke2/agent/pod-manifests/kube-controller-manager.yaml

msg "wait for controller manager pod to restart"

kubectl -n kube-system wait po -l component=kube-controller-manager --for condition=Ready --timeout=20s

msg "install helm"

curl -sfL https://get.helm.sh/helm-v3.9.2-linux-386.tar.gz -o /tmp/helm-v3.9.2-linux-386.tar.gz &&\
 tar -zxvf /tmp/helm-v3.9.2-linux-386.tar.gz -C /tmp &&\
 mv /tmp/linux-386/helm /usr/sbin/helm &&\
 rm -rf /tmp/helm-v3.9.2-linux-386.tar.gz /tmp/linux-386

msg "add rancher and cert manager helm charts"

helm repo add rancher-stable https://releases.rancher.com/server-charts/stable
helm repo add jetstack https://charts.jetstack.io
helm repo update

msg "generate cert manager CRDs"

kubectl apply -f\
  https://github.com/cert-manager/cert-manager/releases/download/v1.7.1/cert-manager.crds.yaml

msg "install cert manager"

helm install cert-manager jetstack/cert-manager --namespace cert-manager --create-namespace --version v1.7.1

msg "wait for cert manager to report ready"

kubectl -n cert-manager wait deploy --all --for condition=Available --timeout 180s

msg "install rancher"

curl -sfL https://releases.rancher.com/server-charts/stable/rancher-2.6.6.tgz\
 -o ./rancher-2.6.6.tgz && tar -zxvf ./rancher-2.6.6.tgz

sed -i -e "/^kubeVersion/d" ./rancher/Chart.yaml

helm install rancher ./rancher\
 --namespace cattle-system\
 --create-namespace\
 --set replicas=1\
 --set bootstrapPassword=admin\
 --set hostname=$(hostname)\
 --set certmanager.version=1.7.1\
 --set useBundledSystemChart=true

msg "wait for rancher"

while true; do
  kubectl -n cattle-system get deploy -oname | while read -r unit; do
    if ! kubectl -n cattle-system rollout status $unit --timeout 30s; then
      sleep 2s
      continue
    fi
  done
  break
done

msg "done installing rancher, listing pods"

kubectl get po -A

echo "To access the Rancher UI, add this to your /etc/hosts: $(hostname -i) $(hostname)"
echo "Then in your browser: https://$(hostname) - bootstrap password is 'admin'"
